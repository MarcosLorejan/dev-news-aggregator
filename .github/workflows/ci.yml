name: CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  scan_ruby:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: false

      - name: Clean and install dependencies
        run: |
          rm -rf vendor/bundle
          bundle config set --local path 'vendor/bundle'
          bundle config set --local deployment false
          bundle install --jobs 4 --retry 3

      - name: Scan for common Rails security vulnerabilities using static analysis
        run: bundle exec brakeman --no-pager

  scan_js:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: false

      - name: Clean and install dependencies
        run: |
          rm -rf vendor/bundle
          bundle config set --local path 'vendor/bundle'
          bundle config set --local deployment false
          bundle install --jobs 4 --retry 3

      - name: Scan for security vulnerabilities in JavaScript dependencies
        run: bundle exec rails importmap:audit

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: false

      - name: Clean and install dependencies
        run: |
          rm -rf vendor/bundle
          bundle config set --local path 'vendor/bundle'
          bundle config set --local deployment false
          bundle install --jobs 4 --retry 3

      - name: Lint code for consistent style
        run: bundle exec rubocop -f github

  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: dev_news_aggregator_test
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Install packages
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential git libpq-dev libyaml-dev pkg-config google-chrome-stable

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: false

      - name: Clean and install dependencies
        run: |
          rm -rf vendor/bundle
          bundle config set --local path 'vendor/bundle'
          bundle config set --local deployment false
          bundle install --jobs 4 --retry 3

      - name: Prepare test database
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/dev_news_aggregator_test
          DB_HOST: localhost
          DB_USERNAME: postgres
          DB_PASSWORD: postgres
        run: bundle exec rails db:test:prepare

      - name: Run tests
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/dev_news_aggregator_test
          DB_HOST: localhost
          DB_USERNAME: postgres
          DB_PASSWORD: postgres
        run: |
          bundle exec rails test
          bundle exec rails test:system

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: ${{ github.workspace }}/tmp/screenshots
          if-no-files-found: ignore

  coverage:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: dev_news_aggregator_test
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Install packages
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y build-essential git libpq-dev libyaml-dev pkg-config google-chrome-stable

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: false

      - name: Clean and install dependencies
        run: |
          rm -rf vendor/bundle
          bundle config set --local path 'vendor/bundle'
          bundle config set --local deployment false
          bundle install --jobs 4 --retry 3

      - name: Prepare test database
        env:
          RAILS_ENV: test
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/dev_news_aggregator_test
          DB_HOST: localhost
          DB_USERNAME: postgres
          DB_PASSWORD: postgres
        run: bundle exec rails db:test:prepare

      - name: Run tests with coverage
        env:
          RAILS_ENV: test
          COVERAGE: true
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/dev_news_aggregator_test
          DB_HOST: localhost
          DB_USERNAME: postgres
          DB_PASSWORD: postgres
        run: |
          bundle exec rails test
          bundle exec rails test:system

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: tests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Archive coverage results
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/

  quality_gate:
    runs-on: ubuntu-latest
    needs: [scan_ruby, scan_js, lint, test, coverage]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.scan_ruby.result }}" == "failure" || "${{ needs.scan_js.result }}" == "failure" || "${{ needs.lint.result }}" == "failure" || "${{ needs.test.result }}" == "failure" || "${{ needs.coverage.result }}" == "failure" ]]; then
            echo "One or more jobs failed"
            exit 1
          fi
          echo "All quality checks passed!"
